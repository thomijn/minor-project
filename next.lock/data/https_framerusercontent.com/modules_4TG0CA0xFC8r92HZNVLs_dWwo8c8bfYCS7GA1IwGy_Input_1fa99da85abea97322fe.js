import { fontStack , fontControls , fontSizeOptions , useUniqueClassName , useOnEnter , useFontControls , usePadding , useRadius , useIsInPreview , paddingControl , useControlledState , borderRadiusControl } from "https://framer.com/m/framer/default-utils.js@0.35.0"; import * as React from "react"; import { ControlType , addPropertyControls } from "framer"; import { useCallback , useRef , useMemo } from "react"; export function Input (props) { const { placeholder, backgroundColor, textColor, border, borderWidth, password, onSubmit, onFocus, onBlur, value, textAlign, multiLine, placeholderColor, focused, inputStyle, caretColor, fontFamily, blurOnSubmit, disabled, keyboard, truncate, onChange, maxLength, enableLimit, isRTL } = props; const [inputValue,setValue] = useControlledState(value); const inputEle = useRef(); const Tag = useMemo(() => { return multiLine ? "textarea" : "input"; }, [multiLine]); const className = useUniqueClassName("input", [placeholderColor]); const inPreview = useIsInPreview(); const fontStyles = useFontControls(props); const paddingValue = usePadding(props); const borderRadius = useRadius(props); const handleChange = useCallback((event) => { const element = multiLine ? event.nativeEvent.target : event.nativeEvent.target; const value = element.value; setValue(value); if (onChange) { onChange(value) }; }, [onChange, multiLine]); useOnEnter(() => { if (inPreview && focused) { inputEle.current.focus() }; }); return React.createElement(React.Fragment, null, React.createElement("style", null, `        \n                    .${className}:focus {\n                        box-shadow: inset 0 0 0 ${props.borderWidth}px\n                        ${props.focusColor} !important;\n                    }\n\n                    .${className}::placeholder {\n                        color: ${placeholderColor} !important;\n                    }\n                `), React.createElement(Tag, {onChange: handleChange, ref: inputEle, value: inputValue, placeholder, onKeyDown: (e) => { if (e.keyCode === 13) { if (blurOnSubmit && inputEle.current) { inputEle.current.blur() }; if (onSubmit) { onSubmit() }; }; }, disabled, onFocus: () => { if (onFocus) { onFocus() }; }, onBlur: () => { if (onBlur) { onBlur() }; }, maxLength: enableLimit ? maxLength : 524288, autoFocus: inPreview && focused, className, style: {...style, color: textColor, backgroundColor, borderRadius, textAlign, caretColor, padding: paddingValue, direction: isRTL ? "rtl" : "ltr", textOverflow: truncate ? "ellipsis" : "unset", boxShadow: !inPreview && focused ? `inset 0 0 0 ${props.borderWidth}px ${props.focusColor}` : `inset 0 0 0 ${borderWidth}px ${border}`, ...fontStyles, ...inputStyle}, type: password ? "password" : "text", inputMode: keyboard})); }; Input.defaultProps = {value: "", placeholder: "Type somethingâ€¦", width: 260, height: 50, backgroundColor: "#EBEBEB", textColor: "#333", focusColor: "#09F", fontSize: 16, fontWeight: 400, borderRadius: 8, padding: 15, border: "rgba(0,0,0,0)", placeholderColor: "#aaa", borderWidth: 1, truncate: false, alignment: "left", caretColor: "#333", multiLine: false, maxLength: 10, password: false, keyboard: ""}; addPropertyControls(Input, {placeholder: {type: ControlType.String, title: "Placeholder"}, value: {type: ControlType.String, title: "Value"}, textColor: {type: ControlType.Color, title: "Text"}, caretColor: {type: ControlType.Color, title: "Caret"}, placeholderColor: {type: ControlType.Color, title: "Placeholder"}, backgroundColor: {type: ControlType.Color, title: "Background"}, border: {type: ControlType.Color, title: "Border"}, borderWidth: {type: ControlType.Number, title: " ", min: 1, max: 5, displayStepper: true}, focusColor: {type: ControlType.Color, title: "Focus"}, focused: {type: ControlType.Boolean, title: "Focused", defaultValue: false, disabledTitle: "No", enabledTitle: "Yes"}, ...fontControls, fontSize: {...fontSizeOptions}, ...paddingControl, ...borderRadiusControl, textAlign: {title: "Text Align", type: ControlType.Enum, displaySegmentedControl: true, optionTitles: ["Left", "Center", "Right"], options: ["left", "center", "right"]}, isRTL: {type: ControlType.Boolean, title: "Direction", enabledTitle: "RTL", disabledTitle: "LTR", defaultValue: false}, disabled: {type: ControlType.Boolean, title: "Disabled", defaultValue: false, disabledTitle: "No", enabledTitle: "Yes"}, multiLine: {type: ControlType.Boolean, title: "Text Area", defaultValue: false, disabledTitle: "No", enabledTitle: "Yes"}, truncate: {type: ControlType.Boolean, title: "Truncate", defaultValue: false, disabledTitle: "No", enabledTitle: "Yes", hidden: ({ multiLine }) => { return multiLine; }}, password: {type: ControlType.Boolean, title: "Password", hidden: ({ multiLine }) => { return multiLine; }, defaultValue: false, disabledTitle: "No", enabledTitle: "Yes"}, enableLimit: {title: "Limit", type: ControlType.Boolean, displayStepper: true, defaultValue: false, disabledTitle: "No", enabledTitle: "Yes"}, maxLength: {title: " ", type: ControlType.Number, defaultValue: Input.defaultProps.maxLength, displayStepper: true, min: 1, hidden: ({ enableLimit }) => { return !enableLimit; }}, keyboard: {type: ControlType.Enum, title: "Keyboard", defaultValue: "", options: ["", "numeric", "tel", "decimal", "email", "url", "search"], optionTitles: ["Default", "Numeric", "Phone", "Decimal", "Email", "URL", "Search"]}, onChange: {type: ControlType.EventHandler}, onSubmit: {type: ControlType.EventHandler}, onFocus: {type: ControlType.EventHandler}, onBlur: {type: ControlType.EventHandler}}); const style = {border: "none", width: "100%", position: "absolute", left: 0, right: 0, top: 0, bottom: 0, outline: "none", resize: "none", margin: 0, fontFamily: fontStack, WebkitTapHighlightColor: "rgba(0, 0, 0, 0)", WebkitAppearance: "none"}; export const __FramerMetadata__ = {exports: {Input: {type: "reactComponent", slots: [], annotations: {framerIntrinsicHeight: "50", framerIntrinsicWidth: "260"}}}}; 