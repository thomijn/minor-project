import { useCallback , useEffect , useRef } from "react"; import { motionValue } from "framer"; import { isMotionValue , useConstant } from "https://framer.com/m/framer/default-utils.js@0.21.0"; export function useAutoMotionValue (inputValue, options) { const optionsRef = useRef(options); const animation = useRef(); const didInitialMount = useRef(false); const onChangeDeps = options.onChangeDeps ? options.onChangeDeps : []; const onChange = useCallback(options?.onChange, [...onChangeDeps]); const transformer = useCallback((value) => { return optionsRef.current.transform ? optionsRef.current.transform(value) : value; }, []); const value = useConstant(() => { return isMotionValue(inputValue) ? inputValue : motionValue(transformer(inputValue)); }); useEffect(() => { if (!isMotionValue(inputValue) && didInitialMount.current) { const newValue = transformer(inputValue); (animation.current)?.stop(); if (onChange) { onChange(newValue, value) }; if ((optionsRef.current)?.animate) { animation.current = value.animate(value, newValue, (optionsRef.current)?.transition); }; }; didInitialMount.current = true; }, [inputValue, ...onChangeDeps]); return value; }; export const __FramerMetadata__ = {exports: {useAutoMotionValue: {type: "function"}}}; 